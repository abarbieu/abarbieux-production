{"version":3,"sources":["components/tree_menu/TreeMenuApi.tsx","components/tree_menu/TreeMenu.tsx","components/panels/SidePanel.tsx","components/panels/BottomPanel.tsx","App.tsx","index.tsx"],"names":["TreeMenuApi","props","scale","units","menu","handleSpawn","currElem","depth","id","node","from","spawnRange","to","children","length","theta","splice","parent","forEach","child","i","dir","diff","dirToDist","menuInfo","baseInfo","title","pos","x","y","animation","keyframes","getKeyframes","startPos","getSpawnRange","route","link","Math","PI","trunc","cos","sin","a","this","TreeMenu","menuApi","animatedLayer","nodeToJSX","MenuButton","getDynamicStyle","key","uuid","v4","onClick","nodeClicked","bind","window","location","href","setState","prevState","elements","baseStyle","styled","button","posx","posy","extra","css","rootPos","state","root","jsxArr","Object","entries","push","React","SidePanel","animated","getStyle","anim","hidden","div","screenSize","toggleHidden","Part","className","Component","BottomPanel","App","windowSize","innerWidth","innerHeight","updateWindowDimensions","path","LaunchMenu","addEventListener","removeEventListener","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.0f770604.chunk.js","sourcesContent":["// import * as uuid from 'uuid';\nimport { keyframes, Keyframes } from 'styled-components';\n\nclass TreeMenuApi {\n  scale: number;\n  units: string;\n  menu: Array<{ [key: string]: MenuNode }>;\n  constructor (props: MyProps) {\n    this.scale = props.scale;\n    this.units = props.units;\n    this.menu = props.menu;\n  }\n\n  //! --------------------------------------------------------------------------\n\n  handleSpawn = (currElem: Array<Layer>, depth: number, id: string) => {\n    let node: InfoNodeChildren = currElem[depth][id] as InfoNodeChildren;\n    const from: number = node.spawnRange.from;\n    let to: number = node.spawnRange.to;\n    const children: Array<string> = (this.menu[depth][id] as MenuNodeChildren)\n      .children;\n    //* Handles root, or 360 spawn, prevents overlap\n    if (from + 2 === to) {\n      to = to - 2 / children.length;\n    }\n    const theta = (to - from) / (children.length - 1);\n\n    //* Deactivates everything else\n    currElem.splice(depth + 2);\n\n    //* Deactivates Siblings\n    node.parent = true;\n    currElem[depth] = { [id]: node };\n\n    //* Resets next layer\n    currElem[depth + 1] = currElem[depth + 1] ? currElem[depth + 1] : {};\n    //* Adds node's children to currElem, returns currElem\n    children.forEach((child: string, i: number) => {\n      if (!currElem[depth + 1][child]) {\n        //* Generates evenly distributed dirs for kids\n        const dir = from + i * theta;\n\n        //* Diff is distance moved\n        const diff = this.dirToDist(dir);\n        const menuInfo: MenuNode = this.menu[depth + 1][child];\n        const baseInfo = {\n          title: menuInfo.title,\n          parent: false,\n          pos: { x: diff.x + node.pos.x, y: diff.y + node.pos.y },\n          animation: { keyframes: this.getKeyframes(dir), startPos: node.pos },\n        };\n\n        //* Populates new children based on type, inline typeguards\n        if ((menuInfo as MenuNodeChildren).children) {\n          currElem[depth + 1][child] = {\n            ...baseInfo,\n            spawnRange: this.getSpawnRange(dir),\n          };\n        } else if ((menuInfo as MenuNodeRoute).route) {\n          currElem[depth + 1][child] = {\n            ...baseInfo,\n            route: (menuInfo as MenuNodeRoute).route,\n          };\n        } else if ((menuInfo as MenuNodeLink).link) {\n          currElem[depth + 1][child] = {\n            ...baseInfo,\n            link: (menuInfo as MenuNodeLink).link,\n          };\n        }\n      }\n    });\n    return depth + 1;\n  };\n\n  //! --------------------------------------------------------------------------\n\n  getKeyframes = (dir: number): Keyframes => {\n    const { x, y } = this.dirToDist(dir);\n    return keyframes`\n    0% {\n      transform: translate(0px, 0px);\n    }\n    100% {\n      transform: translate(\n        ${x}${this.units},\n        ${y}${this.units});\n      }\n    }`;\n  };\n\n  //! --------------------------------------------------------------------------\n\n  //* Returns dist translated\n  dirToDist = (dir: number): { x: number; y: number } => {\n    dir = Math.PI * dir;\n    return {\n      x: Math.trunc(Math.cos(dir) * this.scale),\n      y: Math.trunc(Math.sin(dir) * -this.scale),\n    };\n  };\n\n  //! --------------------------------------------------------------------------\n\n  getSpawnRange = (a: number) => {\n    // a *= 8;\n    // let i: number = Math.floor(((a < 1 ? a + 15 : a) - 1) / 2);\n    return {\n      from: 1.5 + a,\n      to: 2.5 + a,\n      // from: Math.floor(i / 2) * 0.5,\n      // to: Math.floor((i + 3) / 2) * 0.5,\n    };\n  };\n}\n\n//! ----------------------------------------------------------------------------------------------------------------------------------------------------\n//? ----------------------------------------------------------------------------------------------------------------------------------------------------\n//! ----------------------------------------------------------------------------------------------------------------------------------------------------\n//? ----------------------------------------------------------------------------------------------------------------------------------------------------\n\n//* Types and stuff\n\ninterface MyProps {\n  menu: Array<{ [key: string]: MenuNode }>;\n  scale: number;\n  units: string;\n}\nexport interface Point {\n  x: number;\n  y: number;\n}\nexport interface SpawnRange {\n  from: number;\n  to: number;\n}\nexport interface Layer {\n  [key: string]: InfoNode;\n}\n//? --------------------------------------------------------------------------\n\ninterface MenuNodeBasics {\n  title: string;\n}\ninterface MenuNodeChildren extends MenuNodeBasics {\n  children: Array<string>;\n  link?: never;\n  route?: never;\n}\ninterface MenuNodeLink extends MenuNodeBasics {\n  link: string;\n  spawnRange?: never;\n  route?: never;\n}\ninterface MenuNodeRoute extends MenuNodeBasics {\n  route: string;\n  spawnRange?: never;\n  link?: never;\n}\nexport type MenuNode = MenuNodeChildren | MenuNodeLink | MenuNodeRoute;\n\n//? --------------------------------------------------------------------------\n\ninterface InfoNodeBasics {\n  pos: Point;\n  title: string;\n  parent?: boolean;\n  animation?: {\n    startPos: Point;\n    keyframes: Keyframes;\n  };\n}\ninterface InfoNodeChildren extends InfoNodeBasics {\n  spawnRange: SpawnRange;\n  link?: never;\n  route?: never;\n}\ninterface InfoNodeLink extends InfoNodeBasics {\n  link: string;\n  spawnRange?: never;\n  route?: never;\n}\ninterface InfoNodeRoute extends InfoNodeBasics {\n  route: string;\n  spawnRange?: never;\n  link?: never;\n}\nexport type InfoNode = InfoNodeChildren | InfoNodeLink | InfoNodeRoute;\n\n//? --------------------------------------------------------------------------\n\n//! --------------------------------------------------------------------------\n\nexport default TreeMenuApi;\n","import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport styled, { css, FlattenSimpleInterpolation } from 'styled-components';\n// keyframes,\n// Keyframes,\nimport TreeMenuApi, {\n  InfoNode,\n  Point,\n  SpawnRange,\n  MenuNode,\n  Layer,\n} from './TreeMenuApi';\nimport uuid from 'uuid';\n\nclass TreeMenu extends React.Component<MyProps, MyState> {\n  scale: number = 75;\n  units: string = 'px';\n  menuApi: TreeMenuApi;\n  animatedLayer = 1;\n  constructor (props: MyProps) {\n    super(props);\n\n    this.state = {\n      elements:\n        [\n          {\n            root:\n              {\n                pos: { x: 0, y: 0 },\n                title: props.menu[0].root.title,\n                spawnRange: props.spawnRange,\n              },\n          },\n        ],\n    };\n    this.menuApi = new TreeMenuApi({\n      menu: props.menu,\n      scale: 75,\n      units: 'px',\n    });\n  }\n\n  //! --------------------------------------------------------------------------\n\n  //! --------------------------------------------------------------------------\n\n  render (): Array<JSX.Element> {\n    let jsxArr: Array<JSX.Element> = [];\n    for (let i = 0; i < this.state.elements.length; i++) {\n      Object.entries(this.state.elements[i]).forEach(([ id, node ]) => {\n        jsxArr.push(this.nodeToJSX(node, i, id));\n      });\n    }\n    return jsxArr;\n  }\n\n  //! --------------------------------------------------------------------------\n\n  nodeToJSX = (node: InfoNode, depth: number, id: string): JSX.Element => {\n    let MenuButton = this.getDynamicStyle(node, depth);\n    // if (node.animation) {\n    //   this.state.elements[depth][id].animation = undefined;\n    // }\n    if (node.route) {\n      return (\n        <Link to={node.route} key={uuid.v4()}>\n          <MenuButton>{node.title}</MenuButton>\n        </Link>\n      );\n    } else if (node.spawnRange) {\n      return (\n        <MenuButton\n          key={uuid.v4()}\n          onClick={this.nodeClicked.bind(this, depth, id)}\n        >\n          {node.title}\n        </MenuButton>\n      );\n    } else if (node.link) {\n      return (\n        <MenuButton\n          key={uuid.v4()}\n          onClick={() => (window.location.href = node.link)}\n        >\n          {node.title}\n        </MenuButton>\n      );\n    }\n    return <MenuButton key={uuid.v4()}>{node.title}</MenuButton>;\n  };\n\n  //! --------------------------------------------------------------------------\n\n  nodeClicked = (depth: number, id: string): void => {\n    this.setState((prevState: MyState) => {\n      this.animatedLayer = this.menuApi.handleSpawn(\n        prevState.elements,\n        depth,\n        id\n      );\n      return prevState;\n    });\n  };\n\n  //! --------------------------------------------------------------------------\n\n  baseStyle = () => {\n    return styled.button`\n      font-size: 10pt;\n      outline: none;\n      position: fixed;\n\n      width: ${this.scale}${this.units};\n      height: ${this.scale}${this.units};\n      margin-top: -${this.scale / 2}${this.units};\n      margin-left: -${this.scale / 2}${this.units};\n\n      color: #fdb241;\n      background: #07837da6;\n      border-radius: 50%;\n      &:hover {\n        border-color: #fdb241;\n        border-width: 2px;\n      }\n    `;\n  };\n  getDynamicStyle = (node: InfoNode, depth: number) => {\n    let posx = node.pos.x;\n    let posy = node.pos.y;\n    let extra: FlattenSimpleInterpolation = css``;\n\n    if (node.animation && this.animatedLayer === depth && !node.parent) {\n      posx = node.animation.startPos.x;\n      posy = node.animation.startPos.y;\n      extra = css`\n        animation: ${node.animation.keyframes} 350ms ease-in-out forwards;\n      `;\n    }\n    return styled(this.baseStyle())`\n      left: ${this.props.rootPos.x / 2 + posx}px;\n      top: ${this.props.rootPos.y / 2 + posy}px;\n\n      ${extra}\n    `;\n  };\n}\n//! --------------------------------------------------------------------------\n\n//* Types and stuff\n\n//* Each index in active array denotes a layer of the tree,\n//* Each layer (at depth i) is an object mapping ids to positions\ntype MyState = {\n  elements: Array<Layer>;\n};\ntype MyProps = {\n  rootPos: Point;\n  spawnRange: SpawnRange;\n  menu: Array<{ [key: string]: MenuNode }>;\n};\n\nexport default TreeMenu;\n","import React from 'react';\nimport styled, { css } from 'styled-components';\nimport { Point } from '../tree_menu/TreeMenuApi';\nimport './SidePanel.css';\n\ntype MyState = {\n  hidden: boolean;\n};\ntype MyProps = {\n  screenSize: Point;\n};\nexport default class SidePanel extends React.Component<MyProps, MyState> {\n  animated = false;\n  constructor (props: MyProps) {\n    super(props);\n    this.state = {\n      hidden: true,\n    };\n  }\n  render () {\n    const Part = this.getStyle();\n    return (\n      <Part id='sideback' className='vert'>\n        <button id='sidebutton' onClick={() => this.toggleHidden()}>\n          <p className='leftText'>MORE</p>\n        </button>\n      </Part>\n    );\n  }\n\n  getStyle = () => {\n    let anim;\n    if (this.animated) {\n      anim = css`\n        animation: ${this.state.hidden ? 'sidehide' : 'sideexpand'} 350ms\n          ease-in-out forwards;\n      `;\n      this.animated = false;\n      // this.setState({ animated: false });\n    } else {\n      anim = '';\n    }\n    return styled.div`\n      top: ${this.props.screenSize.y / 2 - 100}px;\n      ${anim};\n    `;\n  };\n\n  toggleHidden = () => {\n    this.setState((prevState: MyState) => {\n      prevState.hidden = !prevState.hidden;\n      this.animated = true;\n      return prevState;\n    });\n  };\n}\n","import React from 'react';\nimport styled, { css } from 'styled-components';\nimport { Point } from '../tree_menu/TreeMenuApi';\nimport './BottomPanel.css';\n\ntype MyState = {\n  hidden: boolean;\n};\ntype MyProps = {\n  screenSize: Point;\n};\nexport default class BottomPanel extends React.Component<MyProps, MyState> {\n  animated = false;\n  constructor (props: MyProps) {\n    super(props);\n    this.state = {\n      hidden: true,\n    };\n  }\n  render () {\n    const Part = this.getStyle();\n    return (\n      <Part id='bottomback' className='horiz'>\n        <button\n          id='bottombutton'\n          className='horiz'\n          onClick={() => this.toggleHidden()}\n        >\n          <p>Contact</p>\n        </button>\n      </Part>\n    );\n  }\n\n  getStyle = () => {\n    let anim;\n    if (this.animated) {\n      anim = css`\n        animation: ${this.state.hidden ? 'bottomhide' : 'bottomexpand'} 350ms\n          ease-in-out forwards;\n      `;\n      this.animated = false;\n      // this.setState({ animated: false });\n    } else {\n      anim = '';\n    }\n    return styled.div`\n      left: ${this.props.screenSize.x / 2 - 200}px;\n      ${anim};\n    `;\n  };\n\n  toggleHidden = () => {\n    this.setState((prevState: MyState) => {\n      prevState.hidden = !prevState.hidden;\n      this.animated = true;\n      return prevState;\n    });\n  };\n}\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\n// import { elastic as Sidebar } from 'react-burger-menu';\n// import Header from './components/todolist/Header';\n// import TodoList from './components/todolist/TodoList';\nimport LaunchMenu from './resources/launch-menu.json';\nimport TreeMenu from './components/tree_menu/TreeMenu';\nimport SidePanel from './components/panels/SidePanel';\nimport BottomPanel from './components/panels/BottomPanel';\nimport './App.css';\n\ntype MyState = {\n  windowSize: { x: number; y: number };\n};\ntype MyProps = {};\n\nclass App extends React.Component<MyProps, MyState> {\n  // apiUrl: String;\n\n  constructor (props: MyProps) {\n    super(props);\n    // if (process.env.NODE_ENV === 'development') {\n    //   this.apiUrl = 'http://127.0.0.1:54321/api/';\n    // } else {\n    //   this.apiUrl = 'https://abarbieux.com/api/';\n    // }\n    this.state = {\n      windowSize: { x: window.innerWidth / 2, y: window.innerHeight / 2 },\n    };\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n  }\n  render () {\n    return (\n      <div className='Tiled-back'>\n        <SidePanel screenSize={this.state.windowSize} />\n        <BottomPanel screenSize={this.state.windowSize} />\n        <div>\n          {/* <Sidebar>\n            <p>HELLO</p>\n            <p>HELLO</p>\n            <p>HELLO</p>\n          </Sidebar> */}\n          <main>\n            <Router>\n              <Switch>\n                <Route path='/notes/'>\n                  <div>Note Page</div>\n                </Route>\n                <Route path='/'>\n                  <TreeMenu\n                    rootPos={this.state.windowSize}\n                    spawnRange={{ from: 0.5, to: 2.5 }}\n                    menu={LaunchMenu}\n                  />\n                </Route>\n              </Switch>\n            </Router>\n          </main>\n        </div>\n      </div>\n    );\n  }\n  componentDidMount () {\n    this.updateWindowDimensions();\n    window.addEventListener('resize', this.updateWindowDimensions);\n  }\n\n  componentWillUnmount () {\n    window.removeEventListener('resize', this.updateWindowDimensions);\n  }\n\n  updateWindowDimensions () {\n    this.setState({\n      windowSize: { x: window.innerWidth, y: window.innerHeight },\n    });\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}