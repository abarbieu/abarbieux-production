{"version":3,"sources":["components/todolist/style/Header.tsx","components/tree_menu/TreeMenuApi.tsx","components/tree_menu/TreeMenu.tsx","components/todolist/TodoItem.js","components/todolist/AddTodo.js","components/todolist/TodoList.js","App.tsx","index.tsx"],"names":["headerStyle","background","color","textAlight","padding","Header","style","TreeMenuApi","props","scale","units","menu","handleSpawn","currElem","depth","id","node","from","spawnRange","to","children","length","theta","splice","forEach","child","i","dir","diff","dirToDist","menuInfo","baseInfo","title","pos","x","y","animation","keyframes","getKeyframes","startPos","getSpawnRange","route","link","Math","PI","trunc","cos","sin","a","this","TreeMenu","menuApi","nodeToJSX","MenuButton","getDynamicStyle","state","elements","undefined","key","uuid","v4","onClick","nodeClicked","bind","window","location","href","setState","prevState","baseStyle","styled","button","posx","posy","extra","css","rootPos","root","jsxArr","Object","entries","push","React","TodoItem","getStyle","textAlign","border","textDecoration","todo","completed","type","onChange","markComplete","btnStyle","deleteTodo","Component","borderRadius","float","cursor","AddTodo","onType","e","target","name","value","onSubmit","preventDefault","addTodo","display","flex","placeholder","className","TodoList","getAllTodos","axios","get","apiUrl","then","res","todos","data","put","console","log","map","delete","filter","newTodo","post","complete","App","middle","innerWidth","innerHeight","updateWindowDimensions","path","LaunchMenu","addEventListener","removeEventListener","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.19aa4b4f.chunk.js","sourcesContent":["import React from 'react';\n\nfunction Header () {\n  return (\n    <header style={headerStyle}>\n      <h1>Todo List</h1>\n    </header>\n  );\n}\n\nconst headerStyle = {\n  background: '#333',\n  color: 'white',\n  textAlight: 'center',\n  padding: '10px',\n};\nexport default Header;\n","// import * as uuid from 'uuid';\nimport { keyframes, Keyframes } from 'styled-components';\n\nclass TreeMenuApi {\n  scale: number;\n  units: string;\n  menu: Array<{ [key: string]: MenuNode }>;\n  constructor (props: MyProps) {\n    this.scale = props.scale;\n    this.units = props.units;\n    this.menu = props.menu;\n  }\n\n  //! --------------------------------------------------------------------------\n\n  handleSpawn = (currElem: Array<Layer>, depth: number, id: string) => {\n    let node: InfoNodeChildren = currElem[depth][id] as InfoNodeChildren;\n    const from: number = node.spawnRange.from;\n    let to: number = node.spawnRange.to;\n    const children: Array<string> = (this.menu[depth][id] as MenuNodeChildren)\n      .children;\n    //* Handles root, or 360 spawn, prevents overlap\n    if (from + 2 === to) {\n      to = to - 2 / children.length;\n    }\n    const theta = (to - from) / (children.length - 1);\n\n    //* Deactivates everything else\n    currElem.splice(depth);\n\n    //* Deactivates Siblings\n    currElem[depth] = { [id]: node };\n\n    //* Resets next layer\n    currElem[depth + 1] = {};\n\n    //* Adds node's children to currElem, returns currElem\n    children.forEach((child: string, i: number) => {\n      //* Generates evenly distributed dirs for kids\n      const dir = from + i * theta;\n\n      //* Diff is distance moved\n      const diff = this.dirToDist(dir);\n      const menuInfo: MenuNode = this.menu[depth + 1][child];\n      const baseInfo = {\n        title: menuInfo.title,\n        pos: { x: diff.x + node.pos.x, y: diff.y + node.pos.y },\n        animation: { keyframes: this.getKeyframes(dir), startPos: node.pos },\n      };\n\n      //* Populates new children based on type, inline typeguards\n      if ((menuInfo as MenuNodeChildren).children) {\n        currElem[depth + 1][child] = {\n          ...baseInfo,\n          spawnRange: this.getSpawnRange(dir),\n        };\n      } else if ((menuInfo as MenuNodeRoute).route) {\n        currElem[depth + 1][child] = {\n          ...baseInfo,\n          route: (menuInfo as MenuNodeRoute).route,\n        };\n      } else if ((menuInfo as MenuNodeLink).link) {\n        currElem[depth + 1][child] = {\n          ...baseInfo,\n          link: (menuInfo as MenuNodeLink).link,\n        };\n      }\n    });\n    return currElem;\n  };\n\n  //! --------------------------------------------------------------------------\n\n  getKeyframes = (dir: number): Keyframes => {\n    const { x, y } = this.dirToDist(dir);\n    return keyframes`\n    0% {\n      transform: translate(0px, 0px);\n    }\n    100% {\n      transform: translate(\n        ${x}${this.units},\n        ${y}${this.units});\n      }\n    }`;\n  };\n\n  //! --------------------------------------------------------------------------\n\n  //* Returns dist translated\n  dirToDist = (dir: number): { x: number; y: number } => {\n    dir = Math.PI * dir;\n    return {\n      x: Math.trunc(Math.cos(dir) * this.scale),\n      y: Math.trunc(Math.sin(dir) * -this.scale),\n    };\n  };\n\n  //! --------------------------------------------------------------------------\n\n  getSpawnRange = (a: number) => {\n    // a *= 8;\n    // let i: number = Math.floor(((a < 1 ? a + 15 : a) - 1) / 2);\n    return {\n      from: 1.5 + a,\n      to: 2.5 + a,\n      // from: Math.floor(i / 2) * 0.5,\n      // to: Math.floor((i + 3) / 2) * 0.5,\n    };\n  };\n}\n\n//! ----------------------------------------------------------------------------------------------------------------------------------------------------\n//? ----------------------------------------------------------------------------------------------------------------------------------------------------\n//! ----------------------------------------------------------------------------------------------------------------------------------------------------\n//? ----------------------------------------------------------------------------------------------------------------------------------------------------\n\n//* Types and stuff\n\ninterface MyProps {\n  menu: Array<{ [key: string]: MenuNode }>;\n  scale: number;\n  units: string;\n}\nexport interface Point {\n  x: number;\n  y: number;\n}\nexport interface SpawnRange {\n  from: number;\n  to: number;\n}\nexport interface Layer {\n  [key: string]: InfoNode;\n}\n//? --------------------------------------------------------------------------\n\ninterface MenuNodeBasics {\n  title: string;\n}\ninterface MenuNodeChildren extends MenuNodeBasics {\n  children: Array<string>;\n  link?: never;\n  route?: never;\n}\ninterface MenuNodeLink extends MenuNodeBasics {\n  link: string;\n  spawnRange?: never;\n  route?: never;\n}\ninterface MenuNodeRoute extends MenuNodeBasics {\n  route: string;\n  spawnRange?: never;\n  link?: never;\n}\nexport type MenuNode = MenuNodeChildren | MenuNodeLink | MenuNodeRoute;\n\n//? --------------------------------------------------------------------------\n\ninterface InfoNodeBasics {\n  pos: Point;\n  title: string;\n  animation?: {\n    startPos: Point;\n    keyframes: Keyframes;\n  };\n}\ninterface InfoNodeChildren extends InfoNodeBasics {\n  spawnRange: SpawnRange;\n  link?: never;\n  route?: never;\n}\ninterface InfoNodeLink extends InfoNodeBasics {\n  link: string;\n  spawnRange?: never;\n  route?: never;\n}\ninterface InfoNodeRoute extends InfoNodeBasics {\n  route: string;\n  spawnRange?: never;\n  link?: never;\n}\nexport type InfoNode = InfoNodeChildren | InfoNodeLink | InfoNodeRoute;\n\n//? --------------------------------------------------------------------------\n\n//! --------------------------------------------------------------------------\n\nexport default TreeMenuApi;\n","import * as React from 'react';\nimport { Link } from 'react-router-dom';\nimport styled, { css, FlattenSimpleInterpolation } from 'styled-components';\n// keyframes,\n// Keyframes,\nimport TreeMenuApi, {\n  InfoNode,\n  Point,\n  SpawnRange,\n  MenuNode,\n  Layer,\n} from './TreeMenuApi';\nimport uuid from 'uuid';\n\nclass TreeMenu extends React.Component<MyProps, MyState> {\n  scale: number = 75;\n  units: string = 'px';\n  menuApi: TreeMenuApi;\n  constructor (props: MyProps) {\n    super(props);\n\n    this.state = {\n      elements:\n        [\n          {\n            root:\n              {\n                pos: { x: 0, y: 0 },\n                title: props.menu[0].root.title,\n                spawnRange: props.spawnRange,\n              },\n          },\n        ],\n    };\n    this.menuApi = new TreeMenuApi({\n      menu: props.menu,\n      scale: 75,\n      units: 'px',\n    });\n  }\n\n  //! --------------------------------------------------------------------------\n\n  //! --------------------------------------------------------------------------\n\n  render (): Array<JSX.Element> {\n    let jsxArr: Array<JSX.Element> = [];\n    for (let i = 0; i < this.state.elements.length; i++) {\n      Object.entries(this.state.elements[i]).forEach(([ id, node ]) => {\n        jsxArr.push(this.nodeToJSX(node, i, id));\n      });\n    }\n    return jsxArr;\n  }\n\n  //! --------------------------------------------------------------------------\n\n  nodeToJSX = (node: InfoNode, depth: number, id: string): JSX.Element => {\n    let MenuButton = this.getDynamicStyle(node);\n    if (node.animation) {\n      this.state.elements[depth][id].animation = undefined;\n    }\n    if (node.route) {\n      return (\n        <Link to={node.route} key={uuid.v4()}>\n          <MenuButton>{node.title}</MenuButton>\n        </Link>\n      );\n    } else if (node.spawnRange) {\n      return (\n        <MenuButton\n          key={uuid.v4()}\n          onClick={this.nodeClicked.bind(this, depth, id)}\n        >\n          {node.title}\n        </MenuButton>\n      );\n    } else if (node.link) {\n      return (\n        <MenuButton\n          key={uuid.v4()}\n          onClick={() => (window.location.href = node.link)}\n        >\n          {node.title}\n        </MenuButton>\n      );\n    }\n    return <MenuButton key={uuid.v4()}>{node.title}</MenuButton>;\n  };\n\n  //! --------------------------------------------------------------------------\n\n  nodeClicked = (depth: number, id: string): void => {\n    this.setState((prevState: MyState) => {\n      prevState.elements = this.menuApi.handleSpawn(\n        prevState.elements,\n        depth,\n        id\n      );\n      return prevState;\n    });\n  };\n\n  //! --------------------------------------------------------------------------\n\n  baseStyle = () => {\n    return styled.button`\n      font-size: 10pt;\n      outline: none;\n      position: fixed;\n\n      width: ${this.scale}${this.units};\n      height: ${this.scale}${this.units};\n      margin-top: -${this.scale / 2}${this.units};\n      margin-left: -${this.scale / 2}${this.units};\n\n      color: #fdb241;\n      background: #07837da6;\n      border-radius: 50%;\n      &:hover {\n        border-color: #fdb241;\n        border-width: 2px;\n      }\n    `;\n  };\n  getDynamicStyle = (node: InfoNode) => {\n    let posx = node.pos.x;\n    let posy = node.pos.y;\n    let extra: FlattenSimpleInterpolation = css``;\n    if (node.animation) {\n      posx = node.animation.startPos.x;\n      posy = node.animation.startPos.y;\n      extra = css`\n        animation: ${node.animation.keyframes} 350ms ease-in-out forwards;\n      `;\n    }\n    return styled(this.baseStyle())`\n      left: ${this.props.rootPos.x / 2 + posx}px;\n      top: ${this.props.rootPos.y / 2 + posy}px;\n\n      ${extra}\n    `;\n  };\n}\n//! --------------------------------------------------------------------------\n\n//* Types and stuff\n\n//* Each index in active array denotes a layer of the tree,\n//* Each layer (at depth i) is an object mapping ids to positions\ntype MyState = {\n  elements: Array<Layer>;\n};\ntype MyProps = {\n  rootPos: Point;\n  spawnRange: SpawnRange;\n  menu: Array<{ [key: string]: MenuNode }>;\n};\n\nexport default TreeMenu;\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\n\nexport class TodoItem extends Component {\n  getStyle = () => {\n    return {\n      background     : '#ccc',\n      textAlign      : 'left',\n      padding        : '10px',\n      border         : '1px #c2c2c2 dotted',\n      color          : 'rgb(125,102,142)',\n      textDecoration : this.props.todo.completed ? 'line-through' : 'none'\n    };\n  };\n\n  render () {\n    const { id, title } = this.props.todo;\n    return (\n      <div style={this.getStyle()}>\n        <p>\n          <input\n            type=\"checkbox\"\n            onChange={this.props.markComplete.bind(this, id)}\n          />{' '}\n          {title}\n          <button\n            style={btnStyle}\n            onClick={this.props.deleteTodo.bind(this, id)}\n          >\n            x\n          </button>\n        </p>\n      </div>\n    );\n  }\n}\n\nTodoItem.propTypes = {\n  todo : PropTypes.object.isRequired\n};\n\nconst btnStyle = {\n  background   : '#ff0000',\n  borderRadius : '50%',\n  padding      : '5px 10px',\n  color        : '#fff',\n  float        : 'right',\n  cursor       : 'pointer'\n};\n\nexport default TodoItem;\n","import React, { Component } from 'react';\n\nexport default class AddTodo extends Component {\n  state = {\n    title : ''\n  };\n\n  onType = (e) => this.setState({ [e.target.name]: e.target.value });\n  onSubmit = (e) => {\n    e.preventDefault();\n    this.props.addTodo(this.state.title);\n    this.setState({ title: '' });\n  };\n  render () {\n    return (\n      <form onSubmit={this.onSubmit} style={{ display: 'flex' }}>\n        <input\n          type=\"text\"\n          name=\"title\"\n          style={{ flex: '10' }}\n          placeholder=\"Add Todo...\"\n          value={this.state.title}\n          onChange={this.onType}\n        />\n        <input\n          type=\"submit\"\n          value=\"Submit\"\n          className=\"btn\"\n          style={{ flex: '1', padding: '5px' }}\n        />\n      </form>\n    );\n  }\n}\n","import React from 'react';\nimport { TodoItem } from './TodoItem';\nimport AddTodo from './AddTodo';\nimport axios from 'axios';\nimport PropTypes from 'prop-types';\n\nclass TodoList extends React.Component {\n  constructor (props) {\n    super(props);\n\n    this.state = {\n      todos : [],\n    };\n    this.apiUrl = props.apiUrl;\n  }\n\n  componentDidMount () {\n    axios.get(this.apiUrl).then((res) => {\n      console.log(res.data);\n    });\n    this.getAllTodos();\n  }\n\n  render () {\n    return (\n      <div>\n        <AddTodo addTodo={this.addTodo} />\n        {this.state.todos.map((todo) => (\n          <TodoItem\n            key={todo.id}\n            todo={todo}\n            markComplete={this.markComplete}\n            deleteTodo={this.deleteTodo}\n          />\n        ))}\n      </div>\n    );\n  }\n\n  //* Gets all todos in db\n  getAllTodos = () => {\n    axios.get(this.apiUrl + 'todos').then((res) => {\n      this.setState({\n        todos : res.data,\n      });\n    });\n  };\n\n  //* Called when Todo Checkbox clicked\n  markComplete = (id) => {\n    axios.put(this.apiUrl + `todos/${id}`).then((res) => {\n      console.log('toggled data: ' + res.data);\n    });\n    this.setState({\n      todos : this.state.todos.map((todo) => {\n        if (todo.id === id) {\n          todo.completed = !todo.completed;\n        }\n        return todo;\n      }),\n    });\n  };\n\n  //* Delete todo item\n  deleteTodo = (id) => {\n    axios.delete(this.apiUrl + `todos/${id}`).then((res) => {\n      console.log('deleted data: ' + res.data);\n    });\n    this.setState({\n      todos : [ ...this.state.todos.filter((todo) => todo.id !== id) ],\n    });\n  };\n\n  //* Add todo item\n  addTodo = (title) => {\n    let newTodo = {};\n    axios\n      .post(this.apiUrl + 'todos/', {\n        title    : title,\n        complete : false,\n      })\n      .then((res) => {\n        newTodo = res.data;\n        console.log(newTodo);\n\n        this.setState({ todos: [ ...this.state.todos, newTodo ] });\n      });\n  };\n}\n\nTodoList.propTypes = {\n  apiUrl : PropTypes.string.isRequired,\n};\n\nexport default TodoList;\n","import React from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport LaunchMenu from './resources/launch-menu.json';\nimport Header from './components/todolist/style/Header';\nimport TreeMenu from './components/tree_menu/TreeMenu';\nimport TodoList from './components/todolist/TodoList';\nimport './App.css';\n\ntype MyState = { middle: { x: number; y: number } };\ntype MyProps = {};\n\nclass App extends React.Component<MyProps, MyState> {\n  apiUrl: String;\n\n  constructor (props: MyProps) {\n    super(props);\n    if (process.env.NODE_ENV === 'development') {\n      this.apiUrl = 'http://127.0.0.1:54321/api/';\n    } else {\n      this.apiUrl = 'https://abarbieux.com/api/';\n    }\n    this.state = {\n      middle: { x: window.innerWidth / 2, y: window.innerHeight / 2 },\n    };\n    this.updateWindowDimensions = this.updateWindowDimensions.bind(this);\n  }\n\n  render () {\n    return (\n      <div className='Tiled-back'>\n        <Router>\n          {/* <li>\n            <Link to='/nav/'>Navigator</Link>\n          </li> */}\n          {/* <div className='container'>\n            <Header />\n            <div className='Menu-container'>\n              <TreeMenu\n                rootPos={this.state.middle}\n                spawnRange={{ from: 0, to: 1.5 }}\n                menu={LaunchMenu}\n              />\n            </div>\n          </div> */}\n          <Switch>\n            <Route path='/notes/'>\n              <Header />\n              <TodoList apiUrl={this.apiUrl} />\n            </Route>\n            <Route path='/'>\n              <TreeMenu\n                rootPos={this.state.middle}\n                spawnRange={{ from: 0, to: 2 }}\n                menu={LaunchMenu}\n              />\n            </Route>\n          </Switch>\n        </Router>\n      </div>\n    );\n  }\n  componentDidMount () {\n    this.updateWindowDimensions();\n    window.addEventListener('resize', this.updateWindowDimensions);\n  }\n\n  componentWillUnmount () {\n    window.removeEventListener('resize', this.updateWindowDimensions);\n  }\n\n  updateWindowDimensions () {\n    this.setState({ middle: { x: window.innerWidth, y: window.innerHeight } });\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}